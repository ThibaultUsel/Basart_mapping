<?xml version="1.0" encoding="UTF-8"?>
<generator_policy>

<!-- Person -->

<generator name="person" prefix="basart">
	<pattern>person/{id}</pattern>
</generator>

<generator name="person_id" prefix="basart">
	<pattern>person/{id}/id</pattern>
</generator>

<generator name="person_appellation" prefix="basart">
	<pattern>person/{id}/appellation</pattern>
</generator>

<generator name="person_label">
	<pattern>{first_name} {last_name}</pattern>
</generator>

<generator name="first_name" prefix="basart">
	<pattern>person/{id}/appellation/first_name</pattern>
</generator>

<generator name="last_name" prefix="basart">
	<pattern>person/{id}/appellation/last_name</pattern>
</generator>

<generator name="unknown_person" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="person"/>
        <set-arg name="id_HASHED_CONTENTS"/>
    </custom>
</generator>

<generator name="unknown_person_id" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="person"/>
        <set-arg name="id_HASHED_CONTENTS"/>
        <set-arg name="id_simple_term"/>
    </custom>
</generator>

<generator name="unknown_person_appellation" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="person"/>
        <set-arg name="id_HASHED_CONTENTS"/>
        <set-arg name="appellation"/>
    </custom>
</generator>

<generator name="birth" prefix="basart">
	<pattern>person/{id}/birth</pattern>
</generator>

<generator name="birth_time-span" prefix="basart">
	<pattern>person/{id}/birth/time-span</pattern>
</generator>

<generator name="death" prefix="basart">
	<pattern>person/{id}/death</pattern>
</generator>

<generator name="death_time-span" prefix="basart">
	<pattern>person/{id}/death/time-span</pattern>
</generator>

<generator name="nationality" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="nationality"/>
        <set-arg name="id_HASHED_CONTENTS"/>
    </custom>
</generator>

<generator name="nationality_id" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="nationality"/>
        <set-arg name="id_HASHED_CONTENTS"/>
		<set-arg name="id_simple_term"/>
    </custom>
</generator>

<generator name="nationality_appellation" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="nationality"/>
        <set-arg name="id_HASHED_CONTENTS"/>
		<set-arg name="appellation"/>
    </custom>
</generator>

<generator name="membership" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="membership"/>
        <set-arg name="id_HASHED_CONTENTS"/>
    </custom>
</generator>

<generator name="membership_id" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="membership"/>
        <set-arg name="id_HASHED_CONTENTS"/>
		<set-arg name="id_simple_term"/>
    </custom>
</generator>

<generator name="membership_appellation" prefix="basart">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
        <set-arg name="membership"/>
        <set-arg name="id_HASHED_CONTENTS"/>
		<set-arg name="appellation"/>
    </custom>
</generator>

<generator name="gender" prefix="basart">
	<pattern>gender/{id}</pattern>
</generator>

<generator name="social_relation" prefix="basart">
	<pattern>person/{id}/social_relation</pattern>
</generator>

<generator name="instructor" prefix="basart">
	<pattern>instructor/{id}</pattern>
</generator>

<generator name="instructor_appellation" prefix="basart">
	<pattern>instructor/{id}/appellation</pattern>
</generator>

<generator name="pursuit" prefix="basart">
	<pattern>person/{id}/pursuit</pattern>
</generator>

<generator name="person_type" prefix="basart">
	<pattern>person_type/{id}</pattern>
</generator>

<generator name="person_type_id" prefix="basart">
	<pattern>person_type/{id}/id</pattern>
</generator>

<!-- Address -->

<generator name="address" prefix="basart">
	<pattern>address/{id}</pattern>
</generator>

<!-- City -->

<generator name="city" prefix="basart">
	<pattern>city/{id}</pattern>
</generator>

<!-- Nation -->

<generator name="nation" prefix="basart">
	<pattern>nation/{id}</pattern>
</generator>

<!-- Work -->

<generator name="work" prefix="basart">
	<pattern>work/{id}</pattern>
</generator>

<!-- Exhibition -->

<generator name="exhibition" prefix="basart">
	<pattern>exhibition/{id}</pattern>
</generator>

<!-- Exhibition section -->

<generator name="section" prefix="basart">
	<pattern>section/{id}</pattern>
</generator>

<!-- Exhibition group -->

<generator name="exhibition_group" prefix="basart">
	<pattern>exhib_group/{id}</pattern>
</generator>

<!-- Exhibition catalog -->

<generator name="catalogue" prefix="basart">
	<pattern>catalogue/{id}</pattern>
</generator>

<!-- Committee -->

<generator name="committee" prefix="basart">
	<pattern>committee/{id}</pattern>
</generator>

<!-- Catalogue articles -->

<generator name="article" prefix="basart">
	<pattern>article/{id}</pattern>
</generator>

<!-- General -->

<generator name="URLwithAAT" prefix="aat">
	<pattern>{id}</pattern>
</generator>

<generator name="URLwithHomo" prefix="homo">
	<pattern>{id}</pattern>
</generator>

<generator name="URLwithWD" prefix="wd">
	<pattern>{id}</pattern>
</generator>

<generator name="URLwithVC" prefix="basart">
	<pattern>{id}</pattern>
</generator>

<generator name="dateNormalizerGen">
	<custom generatorClass="gr.forth.DateNormalizer">
		<set-arg name="text"/>
		<set-arg name="bound"/>
		<set-arg name="report"/>
	</custom>
</generator>

<generator name="BMdates">
        <custom generatorClass="gr.forth.BMdates">
            <set-arg name="bound" type="constant"/>
            <set-arg name="text"/>
        </custom>
</generator>

<generator name="TypedLiteralGen">
	<custom generatorClass="gr.forth.TypedLiteralGenerator">
		<set-arg name="text"/>
	</custom>
</generator>

<generator name="URIorUUID">
	<custom generatorClass="gr.forth.URIorUUID">
		<set-arg name="text"></set-arg>
	</custom>
</generator>

<generator name="simple-uri-gen" prefix="vc" shorten="yes">
		<pattern>{category}/{id}</pattern>
</generator>

<generator name="MultiHashingGenerator" prefix="pref">
	<custom generatorClass="gr.forth.MultiHashingGenerator">
		<set-arg name="term"/>
		<set-arg name="term_HASHED_CONTENTS"/>
		<set-arg name="term_other"/>
		<set-arg name="term_RANDOM_UUID"/>
	</custom>
</generator>

</generator_policy>
